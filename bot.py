
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import sqlite3
import logging
from config import BOT_TOKEN, MASTER_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("referrals.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    referral_code TEXT UNIQUE
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS referrals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    referrer_id INTEGER,
    car_brand TEXT,
    plate_number TEXT
)""")
conn.commit()

def generate_referral_code(user_id):
    return f"U{user_id}"

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT referral_code FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        referral_code = row[0]
    else:
        referral_code = generate_referral_code(user_id)
        cursor.execute("INSERT OR IGNORE INTO users (user_id, referral_code) VALUES (?, ?)", (user_id, referral_code))
        conn.commit()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{referral_code}</code>", parse_mode=ParseMode.HTML)

@dp.message_handler(commands=["–¥–æ–±–∞–≤–∏—Ç—å"])
async def add_referral(message: types.Message):
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å [–ú–∞—Ä–∫–∞] [–ù–æ–º–µ—Ä]")
    brand, plate = parts[1], parts[2].upper()
    referrer_id = message.from_user.id
    cursor.execute("INSERT INTO referrals (referrer_id, car_brand, plate_number) VALUES (?, ?, ?)", (referrer_id, brand, plate))
    conn.commit()
    await message.answer(f"–ú–∞—à–∏–Ω–∞ {brand} —Å –Ω–æ–º–µ—Ä–æ–º {plate} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await bot.send_message(MASTER_ID, f"üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç @{message.from_user.username} ({referrer_id}): {brand} {plate}")

@dp.message_handler(commands=["–º–æ–∏"])
async def list_referrals(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT car_brand, plate_number FROM referrals WHERE referrer_id = ?", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        return await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    text = "\n".join([f"{b} {p}" for b, p in rows])
    await message.answer(f"–¢–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{text}")

@dp.message_handler(commands=["—É–¥–∞–ª–∏—Ç—å"])
async def delete_referral(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—É–¥–∞–ª–∏—Ç—å [–ù–æ–º–µ—Ä]")
    plate = parts[1].upper()
    cursor.execute("DELETE FROM referrals WHERE referrer_id = ? AND plate_number = ?", (message.from_user.id, plate))
    conn.commit()
    await message.answer(f"–ó–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º {plate} —É–¥–∞–ª–µ–Ω–∞.")

@dp.message_handler(commands=["—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"])
async def edit_referral(message: types.Message):
    parts = message.text.split()
    if len(parts) != 3:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å [–°—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä] [–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä]")
    old_plate, new_plate = parts[1].upper(), parts[2].upper()
    cursor.execute("UPDATE referrals SET plate_number = ? WHERE referrer_id = ? AND plate_number = ?", (new_plate, message.from_user.id, old_plate))
    conn.commit()
    await message.answer(f"–ù–æ–º–µ—Ä {old_plate} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_plate}.")

@dp.message_handler(commands=["–ø–æ–∏—Å–∫"])
async def search_referral(message: types.Message):
    query = message.text.split(maxsplit=1)
    if len(query) != 2:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /–ø–æ–∏—Å–∫ [–ú–∞—Ä–∫–∞ –∏–ª–∏ –ù–æ–º–µ—Ä]")
    term = query[1].upper()
    cursor.execute("""
        SELECT u.referral_code, r.car_brand, r.plate_number 
        FROM referrals r
        JOIN users u ON r.referrer_id = u.user_id
        WHERE r.car_brand LIKE ? OR r.plate_number LIKE ?
    """, (f"%{term}%", f"%{term}%"))
    rows = cursor.fetchall()
    if not rows:
        return await message.reply("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    text = "\n".join([f"{b} {p} ‚Üí –∫–æ–¥: {c}" for c, b, p in rows])
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ:\n{text}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
